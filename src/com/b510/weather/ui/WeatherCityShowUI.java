package com.b510.weather.ui;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

import org.apache.log4j.Logger;

import com.b510.weather.common.Common;
import com.b510.weather.util.ReaderUtil;
import com.b510.weather.util.WeatherUtil;

/**
 * Show City List user interface.
 * 
 * @author Hongten
 * @created 12 Mar, 2016
 */
public class WeatherCityShowUI extends MainUI {

	private static final long serialVersionUID = 6637110401865056596L;

	static Logger logger = Logger.getLogger(WeatherCityShowUI.class);

	private JComboBox<String> countryComboBox, provinceComboBox;
	private JLabel countryLabel, provinceLabel;
	private JPanel bgPanel, topPanel, midPanel, buttomPanel;
	private JScrollPane cityScrollPane;
	private JTable cityTable;

	//Map<provinceName, countryName> for provinceCountryMap
	static Map<String, String> provinceCountryMap = new HashMap<String, String>();
	//Map<cityName:Code, provinceName> for cityProvinceMap
	static Map<String, String> cityProvinceMap = new HashMap<String, String>();
	public static int num = 0;

	MainUI mainUI;

	/**
	 * Creates new form WeatherCityShowUI
	 */
	public WeatherCityShowUI(String title) {
		super(title);
		initComponents();
		
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				WeatherCityShowUI.this.setVisible(false);
				mainUI.distoryWeatherCityShowUI();
			}
		});
	}

	public void initSelf() {
		this.setVisible(true);
		setPreferredSize(new Dimension(400, 519));
		setResizable(false);
		this.setLocation(MainUI.pointX + 446, MainUI.pointY);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		initElement();
		showMainLayout();
	}

	/**
	 * we need to get country list, province list and city list when we init the element.
	 */
	private void initElement() {
		bgPanel = new JPanel();
		topPanel = new JPanel();
		countryLabel = new JLabel();
		countryComboBox = new JComboBox<String>();
		midPanel = new JPanel();
		provinceLabel = new JLabel();
		provinceComboBox = new JComboBox<String>();
		buttomPanel = new JPanel();
		cityScrollPane = new JScrollPane();
		cityTable = new JTable();

		initSelf();

		countryLabel.setText(Common.COUNTRY);
		countryLabel.setPreferredSize(new java.awt.Dimension(48, 14));
		provinceLabel.setText(Common.PROVINCE);
		
		// get country list
		updateCountry();
		// add action listener to countryComboBox, when the value changed of countryComboBox 
		// then it will effect the value of provinceComboBox
		countryComboBox.addActionListener(this);
		// add action listener to provinceComboBox, when the value changed of provinceComboBox
		// then it will effect the value of city list
		provinceComboBox.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == countryComboBox) {
			updateProvinceAndCity();
		} else if (e.getSource() == provinceComboBox) {
			updateCity((String) countryComboBox.getSelectedItem());
		}
	}

	/**
	 * update country
	 */
	private void updateCountry() {
		String[] countries = null;
		if (WeatherUtil.countryList != null && WeatherUtil.countryList.size() > 0) {
			logger.debug("WeatherUtil.countryList != null ");
			countries = new String[WeatherUtil.countryList.size()];
			for (int i = 0; i < WeatherUtil.countryList.size(); i++) {
				countries[i] = WeatherUtil.countryList.get(i);
				logger.debug(countries[i]);
			}
		}
		countryComboBox.setModel(new DefaultComboBoxModel<String>(countries));
	}

	/**
	 * update province
	 */
	private void updateProvinceAndCity() {
		String countryName = (String) countryComboBox.getSelectedItem();
		logger.debug("updateProvince" + countryName);
		List<String> provinceList = ReaderUtil.reader(Common.WEATHER_CODE_PATH, countryName);
		if (provinceList != null && provinceList.size() > 0) {
			provinceCountryMap = new HashMap<String, String>();
			cityProvinceMap = new HashMap<String, String>();
			for (String line : provinceList) {
				// the line string format like 'singapore:north-west:bukit-timah:24703014'
				String[] names = line.split(Common.COLOR);
				provinceCountryMap.put(names[1], names[0]);
				cityProvinceMap.put(names[2] + Common.COLOR + names[3], names[1]);
			}
			if (provinceCountryMap != null && provinceCountryMap.size() > 0) {
				String[] provinces = new String[provinceCountryMap.size()];
				int index = 0;
				for (Map.Entry<String, String> entry : provinceCountryMap.entrySet()) {
					provinces[index] = entry.getKey();
					logger.debug("provinces[index] " + provinces[index]);
					index++;
				}
				provinceComboBox.setModel(new DefaultComboBoxModel<String>(provinces));

				updateCity(countryName);

			} else {
				logger.debug("can not find record for province of country : " + countryName);
			}
		} else {
			logger.debug("can not find record for country : " + countryName);
		}
	}

	/**
	 * update city
	 */
	@SuppressWarnings("serial")
	private void updateCity(String countryName) {
		logger.debug("START ------ city begin");
		String provinceName = (String) provinceComboBox.getSelectedItem();
		cityScrollPane.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
		cityScrollPane.setVerifyInputWhenFocusTarget(false);

		Object[][] objects = null;
		objects = new Object[][] { { null, null, null, null, null } };
		int no = 0;
		if (cityProvinceMap != null && cityProvinceMap.size() > 0) {
			// get list size
			for (Map.Entry<String, String> entry : cityProvinceMap.entrySet()) {
				if (provinceName.trim().equals(entry.getValue())) {
					no++;
				}
			}
			objects = new Object[no][5];
			no = 0;
			// get city content
			for (Map.Entry<String, String> entry : cityProvinceMap.entrySet()) {
				if (provinceName.trim().equals(entry.getValue())) {
					String[] cityAndCode = entry.getKey().split(Common.COLOR);
					objects[no][0] = String.valueOf(no + 1);
					objects[no][1] = cityAndCode[0];
					objects[no][2] = cityAndCode[1];
					objects[no][3] = provinceName;
					objects[no][4] = countryName;
					logger.debug("objects[no][1] " + objects[no][1]);
					no++;
				}
			}
		}

		// list columns(include no, city name, city code, province name, country name)
		cityTable.setModel(new DefaultTableModel(objects, new String[] { "No", "City", "Code", "Province", "Country" }) {
			boolean[] canEdit = new boolean[] { false, false, false, false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		cityTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		cityTable.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
		cityTable.setOpaque(false);
		cityTable.setRowHeight(20);
		cityTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		cityTable.setSurrendersFocusOnKeystroke(true);
		cityTable.getTableHeader().setReorderingAllowed(false);
		// when we double click the item of the city list, then the application will get
		// the city weather detail according to the city name
		cityTable.addMouseListener(new MouseListener() {

			@Override
			public void mouseReleased(MouseEvent e) {

			}

			@Override
			public void mousePressed(MouseEvent e) {
				if (e.getClickCount() == 2) {
					num++;
					logger.debug("num : " + num);
					// it will search more than 1 times weather detail if we do not 
					// add below condition
					if (num >= 3) {
						int id = cityTable.getSelectedRow();
						String cityName = (String) cityTable.getValueAt(id, 1);
						logger.debug("cityName : " + cityName);
						mainUI.setSearchText(cityName);
						mainUI.search(cityName);
						num = 0;
					}
				}
			}

			@Override
			public void mouseExited(MouseEvent e) {

			}

			@Override
			public void mouseEntered(MouseEvent e) {

			}

			@Override
			public void mouseClicked(MouseEvent e) {

			}
		});
		
		cityScrollPane.setViewportView(cityTable);
		logger.debug("END ------ city end");
	}

	public void setMainUI(MainUI mUI) {
		this.mainUI = mUI;
		updateCurrentLocation();
	}
	
	/**
	 * update current location
	 */
	public void updateCurrentLocation() {
		String provinceAndCountry = mainUI.getCountryLabelValue();
		String[] proCou = provinceAndCountry.split(Common.COMMA);
		if (proCou != null && proCou.length > 0) {
			countryComboBox.setSelectedItem((String) proCou[1].trim().toLowerCase().replace(Common.BLANK, Common.DASH));
			// get city and province list according to country list
			updateProvinceAndCity();
			provinceComboBox.setSelectedItem((String) proCou[0].trim().toLowerCase().replace(Common.BLANK, Common.DASH));
			updateCity(proCou[1].trim().toLowerCase());
		}
	}

	// ===================================================
	// == the user interface of the application as below layout.
	// == WARNING: Do NOT modify this code.
	// ===================================================
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void showMainLayout() {
		topLayout();
		midLayout();
		buttomLayout();

		GroupLayout jPanelBGLayout = new GroupLayout(bgPanel);
		bgPanel.setLayout(jPanelBGLayout);
		jPanelBGLayout.setHorizontalGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelBGLayout.createSequentialGroup().addContainerGap().addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(buttomPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(midPanel, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(topPanel, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addContainerGap()));
		jPanelBGLayout.setVerticalGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelBGLayout.createSequentialGroup().addContainerGap().addComponent(topPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(midPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addComponent(buttomPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE).addContainerGap()));

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(bgPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(bgPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));

		pack();
	}

	/**
	 * If not necessary, please do not change
	 */
	private void topLayout() {
		GroupLayout jPanelTopLayout = new GroupLayout(topPanel);
		topPanel.setLayout(jPanelTopLayout);
		jPanelTopLayout.setHorizontalGroup(jPanelTopLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(GroupLayout.Alignment.TRAILING, jPanelTopLayout.createSequentialGroup().addContainerGap().addComponent(countryLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGap(18, 18, 18).addComponent(countryComboBox, GroupLayout.PREFERRED_SIZE, 240, GroupLayout.PREFERRED_SIZE).addContainerGap()));
		jPanelTopLayout.setVerticalGroup(jPanelTopLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelTopLayout.createSequentialGroup().addContainerGap().addGroup(jPanelTopLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(countryComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE).addComponent(countryLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)).addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
	}

	/**
	 * If not necessary, please do not change
	 */
	private void midLayout() {
		GroupLayout jPanelMidLayout = new GroupLayout(midPanel);
		midPanel.setLayout(jPanelMidLayout);
		jPanelMidLayout.setHorizontalGroup(jPanelMidLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelMidLayout.createSequentialGroup().addContainerGap().addComponent(provinceLabel, GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE).addGap(18, 18, 18).addComponent(provinceComboBox, GroupLayout.PREFERRED_SIZE, 240, GroupLayout.PREFERRED_SIZE).addContainerGap()));
		jPanelMidLayout.setVerticalGroup(jPanelMidLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelMidLayout.createSequentialGroup().addContainerGap().addGroup(jPanelMidLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(provinceLabel).addComponent(provinceComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)).addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
	}

	/**
	 * If not necessary, please do not change
	 */
	private void buttomLayout() {
		GroupLayout jPanelButtomLayout = new GroupLayout(buttomPanel);
		buttomPanel.setLayout(jPanelButtomLayout);
		jPanelButtomLayout.setHorizontalGroup(jPanelButtomLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelButtomLayout.createSequentialGroup().addContainerGap().addComponent(cityScrollPane).addContainerGap()));
		jPanelButtomLayout.setVerticalGroup(jPanelButtomLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelButtomLayout.createSequentialGroup().addContainerGap().addComponent(cityScrollPane, GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE).addContainerGap()));
	}

}
