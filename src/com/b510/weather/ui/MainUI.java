package com.b510.weather.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.LayoutStyle;
import javax.swing.Timer;
import javax.swing.WindowConstants;

import org.apache.log4j.Logger;

import com.b510.weather.common.Common;
import com.b510.weather.util.WeatherUtil;
import com.b510.weather.vo.WeatherVO;

/**
 * The weather application main user interface.
 * 
 * @author Hongten
 * @created 6 Mar, 2016
 */
public class MainUI extends WeatherUI {

	private static final long serialVersionUID = -8214090814268041841L;

	static Logger logger = Logger.getLogger(MainUI.class);

	private JButton forecastAImageIcon, forecastBImageIcon, forecastCImageIcon, searchBtn, currentTempImageIcon;
	private JLabel humidityValue, cityLabel, countryLabel, forecastADay, forecastBDay, forecastCDay, forecastATempHigh, forecastBTempHigh, forecastATempLow, forecastBTempLow, forecastCTempHigh, forecastCTempLow, humidity, searchLabel, currentTempValue, currentTempHighValue, currentTempLowValue, currentTempText, currentDateTime, visibilityLabel, visibilityValue, windLabel, windValue;
	private JMenu file;
	private JMenuItem showCityItem, aboutItem, exitItem;
	private JSeparator line;
	private JMenuBar menuBar;
	private JPanel bgPanel;
	private JTextField searchText;

	public static Map<String, String> cityMap = new HashMap<String, String>();
	WeatherCityShowUI weatherCityShowUI;

	// Default position is (0, 0)
	public static int pointX = 0;
	public static int pointY = 0;

	/**
	 * Creates new form MainUI
	 */
	public MainUI(String title) {
		super(title);
		this.setTitle(title);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	public void init() {
		initComponents();
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		searchLabel.setText(Common.SEARCH + Common.BLANK + Common.COLOR);
		searchText.setText(Common.DEFAULT_CITY);
		searchBtn.setText(Common.SEARCH);
		searchBtn.addActionListener(this);

		file.setText(Common.FILE);
		
		showCityItem = new JMenuItem(Common.SHOW_CITY);
		showCityItem.setAccelerator(KeyStroke.getKeyStroke(Common.M, InputEvent.CTRL_MASK));
		showCityItem.addActionListener(this);
		file.add(showCityItem);
		
		
		aboutItem = new JMenuItem(Common.ABOUT);
		aboutItem.addActionListener(this);
		file.add(aboutItem);
		
		line = new JSeparator();
		file.add(line);

		exitItem = new JMenuItem(Common.EXIT);
		exitItem.setAccelerator(KeyStroke.getKeyStroke(Common.W, InputEvent.CTRL_MASK));
		exitItem.addActionListener(this);
		file.add(exitItem);

		menuBar.add(file);
		setJMenuBar(menuBar);
		mainLayout();

		this.setSize(this.getWidth(), (this.getHeight() + 15));
		System.out.println(this.getWidth()+ "  " +(this.getHeight() + 15));
		this.setResizable(false);
		// setting window location
		this.setLocationRelativeTo(null);
		this.setVisible(true);

		// get current date and time, and update current weather once every half hour.
		Timer timer = new Timer(50, new ActionListener() {
			SimpleDateFormat sdFormat = new SimpleDateFormat(Common.DATE_FORMATE);
			SimpleDateFormat mmFormat = new SimpleDateFormat(Common.DATE_FORMATE_MMSS);

			@Override
			public void actionPerformed(ActionEvent e) {
				Date date = new Date();
				currentDateTime.setText(sdFormat.format(date));
				String minSec = mmFormat.format(date);
				String[] mmSS = minSec.split(":");
				String min = mmSS[0];
				String sec = mmSS[1];
				// update current weather once every half hour.
				if (("30".equals(min) || "00".equals(min)) && ("01".equals(sec) || "03".equals(sec))) {
					search(searchText.getText().trim());
				}
			}
		});
		timer.start();

		WeatherUtil util = new WeatherUtil();
		try {
			util.loadCityMap();
			// load current weather for default city
			search(searchText.getText().trim());
			WeatherUtil.loadCountries();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * init current temperature detail
	 */
	private void initCurrentTempDetail() {
		visibilityLabel.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		visibilityLabel.setText(Common.VISIBILITY + Common.BLANK + Common.COLOR);

		visibilityValue.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		visibilityValue.setText(Common.DASH);

		humidity.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		humidity.setText(Common.HUMIDITY + Common.BLANK + Common.COLOR);

		humidityValue.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		humidityValue.setText(Common.DASH);

		windLabel.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		windLabel.setText(Common.WIND + Common.BLANK + Common.COLOR);

		windValue.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		windValue.setText(Common.DASH);
	}

	/**
	 * init all components.
	 */
	private void initComponents() {
		bgPanel = new JPanel();
		currentTempHighValue = new JLabel();
		currentTempLowValue = new JLabel();
		currentTempValue = new JLabel();
		currentTempText = new JLabel();
		countryLabel = new JLabel();
		searchLabel = new JLabel();
		searchText = new JTextField();
		searchBtn = new JButton();
		cityLabel = new JLabel();
		visibilityLabel = new JLabel();
		visibilityValue = new JLabel();
		humidity = new JLabel();
		humidityValue = new JLabel();
		windLabel = new JLabel();
		windValue = new JLabel();
		forecastADay = new JLabel();
		forecastAImageIcon = new JButton();
		forecastATempLow = new JLabel();
		forecastATempHigh = new JLabel();
		forecastBDay = new JLabel();
		forecastBImageIcon = new JButton();
		forecastBTempLow = new JLabel();
		forecastBTempHigh = new JLabel();
		forecastCImageIcon = new JButton();
		forecastCDay = new JLabel();
		forecastCTempLow = new JLabel();
		forecastCTempHigh = new JLabel();
		currentTempImageIcon = new JButton();
		currentDateTime = new JLabel();
		menuBar = new JMenuBar();
		file = new JMenu();
		// init current temperature information(including current temperature,
		// high, low, description and location)
		initCurrentTempInfo();
	}

	/**
	 * init forecast detail
	 */
	private void initForecastInfo() {
		forecastADay.setFont(new java.awt.Font(Common.FONT_TAHOMA, 1, 14));
		forecastADay.setText(Common.DASH);

		setImageIcon(forecastAImageIcon, "2");

		forecastATempLow.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		forecastATempLow.setForeground(new java.awt.Color(153, 153, 255));
		forecastATempLow.setText(Common.DEFAULT_TEMP);

		forecastATempHigh.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		forecastATempHigh.setText(Common.DEFAULT_TEMP);

		forecastBDay.setFont(new java.awt.Font(Common.FONT_TAHOMA, 1, 14));
		forecastBDay.setText(Common.DASH);

		setImageIcon(forecastBImageIcon, "2");

		forecastBTempLow.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		forecastBTempLow.setForeground(new java.awt.Color(153, 153, 255));
		forecastBTempLow.setText(Common.DEFAULT_TEMP);

		forecastBTempHigh.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		forecastBTempHigh.setText(Common.DEFAULT_TEMP);

		setImageIcon(forecastCImageIcon, "2");

		forecastCDay.setFont(new java.awt.Font(Common.FONT_TAHOMA, 1, 14));
		forecastCDay.setText(Common.DASH);

		forecastCTempLow.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		forecastCTempLow.setForeground(new java.awt.Color(153, 153, 255));
		forecastCTempLow.setText(Common.DEFAULT_TEMP);

		forecastCTempHigh.setFont(new java.awt.Font(Common.FONT_TAHOMA, 0, 12));
		forecastCTempHigh.setText(Common.DEFAULT_TEMP);
	}

	/**
	 * set the imageIcon for button with code number.
	 */
	private void setImageIcon(JButton button, String code) {
		if(Integer.valueOf(code) < 1 || Integer.valueOf(code) > 39){
			code = "2";
		}
		button.setIcon(new ImageIcon(getClass().getResource(Common.WEATHER_ICON_PATH + code + Common.WEATHER_ICON_TYPE)));
	}

	/**
	 * init current temperature information(including current temperature, high,
	 * low, description and location)
	 */
	private void initCurrentTempInfo() {
		currentTempHighValue.setFont(new java.awt.Font(Common.FONT_TAHOMA, 1, 18));
		currentTempHighValue.setText(Common.DEFAULT_TEMP);

		currentTempLowValue.setFont(new java.awt.Font(Common.FONT_TAHOMA, 1, 18));
		currentTempLowValue.setForeground(new java.awt.Color(153, 153, 255));
		currentTempLowValue.setText(Common.DEFAULT_TEMP);

		currentTempValue.setFont(new java.awt.Font(Common.FONT_TAHOMA, 1, 48));
		currentTempValue.setForeground(new java.awt.Color(255, 0, 0));
		currentTempValue.setText(Common.DEFAULT_TEMP);

		currentTempText.setFont(new java.awt.Font(Common.FONT_TAHOMA, 1, 12));
		currentTempText.setText(Common.DASH);

		countryLabel.setFont(new java.awt.Font(Common.FONT_TAHOMA, 1, 12));
		countryLabel.setText(Common.DASH);

		cityLabel.setFont(new java.awt.Font(Common.FONT_TAHOMA, 1, 18));
		cityLabel.setText(Common.DASH);

		setImageIcon(currentTempImageIcon, "2");
		initCurrentTempDetail();
		initForecastInfo();
	}

	/**
	 * set current city weather information
	 * 
	 * @param vo {@link com.b510.weather.vo.WeatherVO WeatherVO}
	 */
	public void setCurrentTempInfo(WeatherVO vo) {
		currentTempHighValue.setText(vo.getHigh() + Common.DEGREE);
		currentTempLowValue.setText(vo.getLow() + Common.DEGREE);
		currentTempValue.setText(vo.getTemp() + Common.DEGREE);
		currentTempText.setText(vo.getText());
		String province = vo.getProvince() == null ? Common.EMPTY : vo.getProvince().substring(0, 1).toUpperCase() + vo.getProvince().substring(1, vo.getProvince().length());
		String provinceCountry = province.equals(Common.EMPTY) ? vo.getCountry().substring(0, 1).toUpperCase() + vo.getCountry().substring(1, vo.getCountry().length()) : province + Common.COMMA + Common.BLANK + vo.getCountry().substring(0, 1).toUpperCase() + vo.getCountry().substring(1, vo.getCountry().length());
		countryLabel.setText(provinceCountry);
		cityLabel.setText(vo.getCity().substring(0, 1).toUpperCase() + vo.getCity().substring(1, vo.getCity().length()));
		setImageIcon(currentTempImageIcon, vo.getCode());

		// current temperature detail
		visibilityValue.setText(vo.getVisibility() + Common.KM);
		humidityValue.setText(vo.getHumidity() + Common.PERCENT);
		windValue.setText(vo.getWindSpeed() + Common.KM_H);

		// forecast detail
		if (vo.getWeatherVOs() != null && vo.getWeatherVOs().size() > 0) {
			WeatherVO forecastA = vo.getWeatherVOs().get(0);
			forecastADay.setText(forecastA.getDay());
			setImageIcon(forecastAImageIcon, vo.getCode());
			forecastATempLow.setText(forecastA.getLow() + Common.DEGREE);
			forecastATempHigh.setText(forecastA.getHigh() + Common.DEGREE);

			WeatherVO forecastB = vo.getWeatherVOs().get(1);
			forecastBDay.setText(forecastB.getDay());
			setImageIcon(forecastBImageIcon, vo.getCode());
			forecastBTempLow.setText(forecastB.getLow() + Common.DEGREE);
			forecastBTempHigh.setText(forecastB.getHigh() + Common.DEGREE);

			WeatherVO forecastC = vo.getWeatherVOs().get(2);
			forecastCDay.setText(forecastC.getDay());
			setImageIcon(forecastCImageIcon, vo.getCode());
			forecastCTempLow.setText(forecastC.getLow() + Common.DEGREE);
			forecastCTempHigh.setText(forecastC.getHigh() + Common.DEGREE);
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == searchBtn) {
			logger.debug("search...");
			String cityName = searchText.getText().trim();
			if (cityName == null || Common.EMPTY.equals(cityName)) {
				JOptionPane.showMessageDialog(MainUI.this, Common.TYPE_CITY);
			} else {
				// search the city weather detail
				search(cityName);
			}
		} else if (e.getSource() == showCityItem) {
			logger.debug("show city...");
			if (weatherCityShowUI == null) {
				setMainUIXY();
				weatherCityShowUI = new WeatherCityShowUI("Show City");
				weatherCityShowUI.setMainUI(MainUI.this);
			} else {
				weatherCityShowUI.setVisible(true);
			}
		} else if (e.getSource() == aboutItem) {
			logger.debug("about...");
			JOptionPane.showMessageDialog(this, Common.ABOUT_INFO, Common.ABOUT, JOptionPane.INFORMATION_MESSAGE);
		} else if (e.getSource() == exitItem) {
			logger.debug("exit");
			System.exit(0);
		}
	}

	/**
	 * search operation.
	 */
	public void search(String cityName) {
		try {
			cityName = cityName.toLowerCase().trim().replace(Common.BLANK, Common.DASH);
			WeatherVO cityWeatherDetail = WeatherUtil.searchWeather(cityName, cityMap);
			if (cityWeatherDetail != null && cityWeatherDetail.getCityCode() != null) {
				logger.debug("finded.....");
				logger.debug("city name : " + cityWeatherDetail.getCity() + ", city code :" + cityWeatherDetail.getCityCode());
				setCurrentTempInfo(cityWeatherDetail);
			} else {
				logger.debug("no record");
				JOptionPane.showMessageDialog(MainUI.this, Common.CAN_NOT_FIND_CITY);
			}
		} catch (Exception e1) {
			e1.printStackTrace();
		}
	}
	
	public void setMainUIXY() {
		pointX = getMainUIX();
		pointY = getMainUIY();
	}

	private int getMainUIY() {
		return (int) getLocation().getY();
	}

	private int getMainUIX() {
		return (int) getLocation().getX();
	}

	public void distoryWeatherCityShowUI() {
		if (null != weatherCityShowUI) {
			weatherCityShowUI = null;
		}
	}
	
	public void setSearchText(String text){
		this.searchText.setText(text);
	}
	
	public String getCityLabelValue(){
		return cityLabel.getText().trim().toLowerCase();
	}
	
	public String getCountryLabelValue(){
		return countryLabel.getText().trim().toLowerCase();
	}
	
	// ===================================================
	// == the user interface of the application as below layout.
	// == WARNING: Do NOT modify this code.
	// ===================================================
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void mainLayout() {
		GroupLayout jPanelBGLayout = new GroupLayout(bgPanel);
		bgPanel.setLayout(jPanelBGLayout);
		jPanelBGLayout.setHorizontalGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelBGLayout.createSequentialGroup().addContainerGap().addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelBGLayout.createSequentialGroup().addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false).addGroup(jPanelBGLayout.createSequentialGroup().addComponent(forecastATempLow).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(forecastATempHigh)).addComponent(forecastAImageIcon).addGroup(jPanelBGLayout.createSequentialGroup().addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false).addComponent(visibilityLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(forecastADay, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(visibilityValue, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false).addComponent(forecastBImageIcon, GroupLayout.Alignment.TRAILING).addComponent(forecastBDay).addGroup(jPanelBGLayout.createSequentialGroup().addComponent(humidity, GroupLayout.PREFERRED_SIZE, 66, GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(humidityValue, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGroup(jPanelBGLayout.createSequentialGroup().addComponent(forecastBTempLow).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(forecastBTempHigh))).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false).addComponent(forecastCImageIcon, GroupLayout.Alignment.TRAILING).addGroup(jPanelBGLayout.createSequentialGroup().addComponent(forecastCTempLow).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(forecastCTempHigh)).addGroup(jPanelBGLayout.createSequentialGroup().addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false).addComponent(windLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(forecastCDay, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(windValue, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))).addGroup(jPanelBGLayout.createSequentialGroup().addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelBGLayout.createSequentialGroup().addComponent(currentTempValue).addGap(10, 10, 10).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(currentTempText).addGroup(jPanelBGLayout.createSequentialGroup().addComponent(currentTempLowValue).addGap(96, 96, 96).addComponent(currentTempHighValue)))).addGroup(jPanelBGLayout.createSequentialGroup().addComponent(searchLabel).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(searchText)).addComponent(cityLabel).addComponent(countryLabel)).addGap(10, 10, 10).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(currentTempImageIcon).addComponent(searchBtn))).addGroup(GroupLayout.Alignment.TRAILING, jPanelBGLayout.createSequentialGroup().addGap(0, 0, Short.MAX_VALUE).addComponent(currentDateTime))).addContainerGap()));
		jPanelBGLayout.setVerticalGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelBGLayout.createSequentialGroup().addContainerGap().addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(searchLabel).addComponent(searchText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE).addComponent(searchBtn)).addGap(8, 8, 8).addComponent(currentDateTime).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelBGLayout.createSequentialGroup().addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(currentTempLowValue).addComponent(currentTempHighValue)).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(currentTempValue).addComponent(currentTempText))).addGap(24, 24, 24).addComponent(cityLabel).addGap(18, 18, 18).addComponent(countryLabel)).addComponent(currentTempImageIcon)).addGap(18, 18, 18).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(visibilityLabel).addComponent(visibilityValue).addComponent(humidity).addComponent(humidityValue).addComponent(windLabel).addComponent(windValue)).addGap(18, 18, 18).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(forecastADay).addComponent(forecastBDay).addComponent(forecastCDay)).addGap(18, 18, 18).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false).addComponent(forecastCImageIcon, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(forecastAImageIcon, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addComponent(forecastBImageIcon)).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(forecastATempLow).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(forecastATempHigh).addComponent(forecastBTempLow)).addGroup(jPanelBGLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(forecastBTempHigh).addComponent(forecastCTempLow).addComponent(forecastCTempHigh))).addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(bgPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE).addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(bgPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE).addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		pack();
	}

}
